/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlagiarismResult } from "./PlagiarismResult";
import { PlagiarismResultCountArgs } from "./PlagiarismResultCountArgs";
import { PlagiarismResultFindManyArgs } from "./PlagiarismResultFindManyArgs";
import { PlagiarismResultFindUniqueArgs } from "./PlagiarismResultFindUniqueArgs";
import { CreatePlagiarismResultArgs } from "./CreatePlagiarismResultArgs";
import { UpdatePlagiarismResultArgs } from "./UpdatePlagiarismResultArgs";
import { DeletePlagiarismResultArgs } from "./DeletePlagiarismResultArgs";
import { Document } from "../../document/base/Document";
import { DocumentOrderByInput } from "../../document/base/DocumentOrderByInput";
import { PlagiarismResultService } from "../plagiarismResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlagiarismResult)
export class PlagiarismResultResolverBase {
  constructor(
    protected readonly service: PlagiarismResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "read",
    possession: "any",
  })
  async _plagiarismResultsMeta(
    @graphql.Args() args: PlagiarismResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlagiarismResult])
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "read",
    possession: "any",
  })
  async plagiarismResults(
    @graphql.Args() args: PlagiarismResultFindManyArgs
  ): Promise<PlagiarismResult[]> {
    return this.service.plagiarismResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlagiarismResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "read",
    possession: "own",
  })
  async plagiarismResult(
    @graphql.Args() args: PlagiarismResultFindUniqueArgs
  ): Promise<PlagiarismResult | null> {
    const result = await this.service.plagiarismResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlagiarismResult)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "create",
    possession: "any",
  })
  async createPlagiarismResult(
    @graphql.Args() args: CreatePlagiarismResultArgs
  ): Promise<PlagiarismResult> {
    return await this.service.createPlagiarismResult({
      ...args,
      data: {
        ...args.data,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlagiarismResult)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "update",
    possession: "any",
  })
  async updatePlagiarismResult(
    @graphql.Args() args: UpdatePlagiarismResultArgs
  ): Promise<PlagiarismResult | null> {
    try {
      return await this.service.updatePlagiarismResult({
        ...args,
        data: {
          ...args.data,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlagiarismResult)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "delete",
    possession: "any",
  })
  async deletePlagiarismResult(
    @graphql.Args() args: DeletePlagiarismResultArgs
  ): Promise<PlagiarismResult | null> {
    try {
      return await this.service.deletePlagiarismResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async getDocument(
    @graphql.Parent() parent: PlagiarismResult
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Document)
  async AnalyzeDocument(
    @graphql.Args()
    args: DocumentOrderByInput
  ): Promise<Document> {
    return this.service.AnalyzeDocument(args);
  }
}
