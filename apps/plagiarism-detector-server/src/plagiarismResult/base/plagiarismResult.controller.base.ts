/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PlagiarismResultService } from "../plagiarismResult.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlagiarismResultCreateInput } from "./PlagiarismResultCreateInput";
import { PlagiarismResult } from "./PlagiarismResult";
import { PlagiarismResultFindManyArgs } from "./PlagiarismResultFindManyArgs";
import { PlagiarismResultWhereUniqueInput } from "./PlagiarismResultWhereUniqueInput";
import { PlagiarismResultUpdateInput } from "./PlagiarismResultUpdateInput";
import { DocumentOrderByInput } from "../../document/base/DocumentOrderByInput";
import { Document } from "../../document/base/Document";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PlagiarismResultControllerBase {
  constructor(
    protected readonly service: PlagiarismResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlagiarismResult })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPlagiarismResult(
    @common.Body() data: PlagiarismResultCreateInput
  ): Promise<PlagiarismResult> {
    return await this.service.createPlagiarismResult({
      data: {
        ...data,

        document: data.document
          ? {
              connect: data.document,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        details: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        score: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PlagiarismResult] })
  @ApiNestedQuery(PlagiarismResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async plagiarismResults(
    @common.Req() request: Request
  ): Promise<PlagiarismResult[]> {
    const args = plainToClass(PlagiarismResultFindManyArgs, request.query);
    return this.service.plagiarismResults({
      ...args,
      select: {
        createdAt: true,
        details: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        score: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlagiarismResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async plagiarismResult(
    @common.Param() params: PlagiarismResultWhereUniqueInput
  ): Promise<PlagiarismResult | null> {
    const result = await this.service.plagiarismResult({
      where: params,
      select: {
        createdAt: true,
        details: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        score: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlagiarismResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePlagiarismResult(
    @common.Param() params: PlagiarismResultWhereUniqueInput,
    @common.Body() data: PlagiarismResultUpdateInput
  ): Promise<PlagiarismResult | null> {
    try {
      return await this.service.updatePlagiarismResult({
        where: params,
        data: {
          ...data,

          document: data.document
            ? {
                connect: data.document,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          details: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          score: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlagiarismResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismResult",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePlagiarismResult(
    @common.Param() params: PlagiarismResultWhereUniqueInput
  ): Promise<PlagiarismResult | null> {
    try {
      return await this.service.deletePlagiarismResult({
        where: params,
        select: {
          createdAt: true,
          details: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          score: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/analyze")
  @swagger.ApiOkResponse({
    type: Document,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AnalyzeDocument(
    @common.Body()
    body: DocumentOrderByInput
  ): Promise<Document> {
    return this.service.AnalyzeDocument(body);
  }
}
