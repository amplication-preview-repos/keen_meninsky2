/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Document as PrismaDocument,
  PlagiarismResult as PrismaPlagiarismResult,
  User as PrismaUser,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";
import { DocumentCreateInput } from "./DocumentCreateInput";
import { Document } from "./Document";

export class DocumentServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.DocumentCountArgs, "select">): Promise<number> {
    return this.prisma.document.count(args);
  }

  async documents(
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.document.findMany(args);
  }
  async document(
    args: Prisma.DocumentFindUniqueArgs
  ): Promise<PrismaDocument | null> {
    return this.prisma.document.findUnique(args);
  }
  async createDocument(
    args: Prisma.DocumentCreateArgs
  ): Promise<PrismaDocument> {
    return this.prisma.document.create(args);
  }
  async updateDocument(
    args: Prisma.DocumentUpdateArgs
  ): Promise<PrismaDocument> {
    return this.prisma.document.update(args);
  }
  async deleteDocument(
    args: Prisma.DocumentDeleteArgs
  ): Promise<PrismaDocument> {
    return this.prisma.document.delete(args);
  }

  async uploadFileContent<T extends Prisma.DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaDocument> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "fileContent";
    const fileContent = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.document.update({
      where: args.where,

      data: {
        fileContent: fileContent as InputJsonValue,
      },
    });
  }

  async downloadFileContent<T extends Prisma.DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentFindUniqueArgs>
  ): Promise<FileDownload> {
    const { fileContent } = await this.prisma.document.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      fileContent as unknown as LocalStorageFile
    );
  }

  async deleteFileContent<T extends Prisma.DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentFindUniqueArgs>
  ): Promise<PrismaDocument> {
    const { fileContent } = await this.prisma.document.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      fileContent as unknown as LocalStorageFile
    );

    return await this.prisma.document.update({
      where: args.where,

      data: {
        fileContent: Prisma.DbNull,
      },
    });
  }

  async findPlagiarismResults(
    parentId: string,
    args: Prisma.PlagiarismResultFindManyArgs
  ): Promise<PrismaPlagiarismResult[]> {
    return this.prisma.document
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .plagiarismResults(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.document
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async UploadDocument(args: DocumentCreateInput): Promise<Document> {
    throw new Error("Not implemented");
  }
}
